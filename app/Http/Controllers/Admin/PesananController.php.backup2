<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Pesanan;
use App\Models\PesananItem;
use App\Models\Produk;
use App\Models\StokProduk;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

class PesananController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $perPage = request('per_page', 15);

        if ($perPage === 'all') {
            $allItems = Pesanan::with('pesananItems.produk')->orderBy('tanggal_pesanan', 'desc')->get();
            $currentPage = \Illuminate\Pagination\Paginator::resolveCurrentPage();
            $perPageCount = $allItems->count() ?: 1;
            $currentItems = $allItems->slice(($currentPage - 1) * $perPageCount, $perPageCount)->values();

            $pesanans = new \Illuminate\Pagination\LengthAwarePaginator($currentItems, $allItems->count(), $perPageCount, $currentPage, [
                'path' => \Illuminate\Pagination\Paginator::resolveCurrentPath(),
                'query' => request()->query()
            ]);
        } else {
            $pesanans = Pesanan::with('pesananItems.produk')
                ->orderBy('tanggal_pesanan', 'desc')
                ->paginate((int) $perPage)
                ->appends(request()->query());
        }

        return view('admin.pages.pesanan.index-pesanan', compact('pesanans'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        // Get products from operational stock (stok_produks) with available stock
        $produkStoks = StokProduk::with('produk')
            ->selectRaw('produk_id, SUM(sisa_stok) as total_stok')
            ->where('sisa_stok', '>', 0)
            ->groupBy('produk_id')
            ->having('total_stok', '>', 0)
            ->get();

        // Format data for view with product master prices
        $produks = $produkStoks->map(function ($stok) {
            return (object) [
                'id' => $stok->produk_id,
                'nama_produk' => $stok->produk->nama_produk,
                'satuan' => $stok->produk->satuan,
                'harga_jual' => $stok->produk->harga_jual, // Use master product price
                'stok_tersedia' => $stok->total_stok,
            ];
        });

        return view('admin.pages.pesanan.create-pesanan', compact('produks'));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $request->validate([
            'tanggal_pesanan' => 'required|date',
            'nama_pelanggan' => 'required|string|max:255',
            'alamat' => 'required|string',
            'no_telepon' => 'required|string|max:20',
            'items' => 'required|array|min:1',
            'items.*.produk_id' => 'required|exists:produks,id',
            'items.*.jumlah' => 'required|numeric|min:0.01'
        ]);

        // Generate unique kode pesanan before transaction
        $tanggal = date('ymd', strtotime($request->tanggal_pesanan));
        $timestamp = date('His') . substr(microtime(), 2, 3); // HHMMSS + milliseconds
        $random = rand(10, 99); // 2 digit random
        $kode_pesanan = 'PSN' . $tanggal . $timestamp . $random;

        DB::transaction(function () use ($request, $kode_pesanan) {
            // Validate stock availability for each item
            foreach ($request->items as $item) {
                $produkId = $item['produk_id'];
                $jumlahDibutuhkan = $item['jumlah'];

                // Check total available stock
                $totalStok = StokProduk::where('produk_id', $produkId)
                    ->where('sisa_stok', '>', 0)
                    ->sum('sisa_stok');

                if ($totalStok < $jumlahDibutuhkan) {
                    throw new \Exception("Stok produk ID {$produkId} tidak mencukupi. Tersedia: {$totalStok}, Dibutuhkan: {$jumlahDibutuhkan}");
                }
            }

            // Hitung total harga
            $total_harga = 0;
            foreach ($request->items as $item) {
                $produk = \App\Models\Produk::find($item['produk_id']);
                $total_harga += $item['jumlah'] * $produk->harga_jual;
            }

            // Buat pesanan
            $pesanan = Pesanan::create([
                'kode_pesanan' => $kode_pesanan,
                'tanggal_pesanan' => $request->tanggal_pesanan,
                'nama_pelanggan' => $request->nama_pelanggan,
                'alamat' => $request->alamat,
                'no_telepon' => $request->no_telepon,
                'status' => 'pending',
                'total_harga' => $total_harga
            ]);

            // Process each item and reduce stock (FIFO)
            foreach ($request->items as $item) {
                $produkId = $item['produk_id'];
                $jumlahDibutuhkan = $item['jumlah'];
                
                // Get product price from master
                $produk = \App\Models\Produk::find($produkId);
                $hargaSatuan = $produk->harga_jual;

                // Get stock entries ordered by date (FIFO)
                $stokEntries = StokProduk::where('produk_id', $produkId)
                    ->where('sisa_stok', '>', 0)
                    ->orderBy('tanggal')
                    ->orderBy('id')
                    ->get();

                $sisaDibutuhkan = $jumlahDibutuhkan;

                foreach ($stokEntries as $stokEntry) {
                    if ($sisaDibutuhkan <= 0) break;

                    $stokTersedia = $stokEntry->sisa_stok;

                    if ($stokTersedia >= $sisaDibutuhkan) {
                        // Enough stock in this entry
                        $stokEntry->increment('jumlah_keluar', $sisaDibutuhkan);
                        $stokEntry->decrement('sisa_stok', $sisaDibutuhkan);
                        $sisaDibutuhkan = 0;
                    } else {
                        // Not enough, take all from this entry
                        $stokEntry->increment('jumlah_keluar', $stokTersedia);
                        $stokEntry->decrement('sisa_stok', $stokTersedia);
                        $sisaDibutuhkan -= $stokTersedia;
                    }
                }

                // Buat pesanan item
                PesananItem::create([
                    'pesanan_id' => $pesanan->id,
                    'produk_id' => $produkId,
                    'jumlah' => $jumlahDibutuhkan,
                    'harga_satuan' => $hargaSatuan,
                    'subtotal' => $jumlahDibutuhkan * $hargaSatuan
                ]);
            }
        });

        return redirect()->route('backoffice.pesanan.index')->with('success', 'Pesanan berhasil dibuat dan stok telah dikurangi.');
    }

    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        $pesanan = Pesanan::with('pesananItems.produk')->findOrFail($id);
        return view('admin.pages.pesanan.show-pesanan', compact('pesanan'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        $pesanan = Pesanan::with('pesananItems.produk')->findOrFail($id);

        // Get products from operational stock (stok_produks) with available stock
        $produkStoks = StokProduk::with('produk')
            ->selectRaw('produk_id, SUM(sisa_stok) as total_stok')
            ->where('sisa_stok', '>', 0)
            ->groupBy('produk_id')
            ->having('total_stok', '>', 0)
            ->get();

        // Format data for view with product master prices
        $produks = $produkStoks->map(function ($stok) {
            return (object) [
                'id' => $stok->produk_id,
                'nama_produk' => $stok->produk->nama_produk,
                'satuan' => $stok->produk->satuan,
                'harga_jual' => $stok->produk->harga_jual, // Use master product price
                'stok_tersedia' => $stok->total_stok,
            ];
        });

        return view('admin.pages.pesanan.edit-pesanan', compact('pesanan', 'produks'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        $pesanan = Pesanan::findOrFail($id);

        $request->validate([
            'tanggal_pesanan' => 'required|date',
            'nama_pelanggan' => 'required|string|max:255',
            'alamat' => 'required|string',
            'no_telepon' => 'required|string|max:20',
            'status' => 'required|in:pending,diproses,selesai,dibatalkan',
            'items' => 'required|array|min:1',
            'items.*.produk_id' => 'required|exists:produks,id',
            'items.*.jumlah' => 'required|numeric|min:0.01'
        ]);

        DB::transaction(function () use ($request, $pesanan) {
            // Validate stock availability for each item
            foreach ($request->items as $item) {
                $produkId = $item['produk_id'];
                $jumlahDibutuhkan = $item['jumlah'];

                // Check total available stock
                $totalStok = StokProduk::where('produk_id', $produkId)
                    ->where('sisa_stok', '>', 0)
                    ->sum('sisa_stok');

                if ($totalStok < $jumlahDibutuhkan) {
                    throw new \Exception("Stok produk ID {$produkId} tidak mencukupi. Tersedia: {$totalStok}, Dibutuhkan: {$jumlahDibutuhkan}");
                }
            }

            // Return stock from old order items (simplified approach)
            foreach ($pesanan->pesananItems as $oldItem) {
                $produkId = $oldItem->produk_id;
                $jumlahDikembalikan = $oldItem->jumlah;

                // Get stock entries ordered by date (LIFO for returns)
                $stokEntries = StokProduk::where('produk_id', $produkId)
                    ->where('jumlah_keluar', '>', 0)
                    ->orderBy('tanggal', 'desc')
                    ->orderBy('id', 'desc')
                    ->get();

                $sisaDikembalikan = $jumlahDikembalikan;

                foreach ($stokEntries as $stokEntry) {
                    if ($sisaDikembalikan <= 0) break;

                    $stokDikeluarkan = $stokEntry->jumlah_keluar;

                    if ($stokDikeluarkan >= $sisaDikembalikan) {
                        // Enough to return
                        $stokEntry->decrement('jumlah_keluar', $sisaDikembalikan);
                        $stokEntry->increment('sisa_stok', $sisaDikembalikan);
                        $sisaDikembalikan = 0;
                    } else {
                        // Return all from this entry
                        $stokEntry->decrement('jumlah_keluar', $stokDikeluarkan);
                        $stokEntry->increment('sisa_stok', $stokDikeluarkan);
                        $sisaDikembalikan -= $stokDikeluarkan;
                    }
                }
            }

            // Hitung total harga
            $total_harga = 0;
            foreach ($request->items as $item) {
                $produk = \App\Models\Produk::find($item['produk_id']);
                $total_harga += $item['jumlah'] * $produk->harga_jual;
            }

            // Update pesanan
            $pesanan->update([
                'tanggal_pesanan' => $request->tanggal_pesanan,
                'nama_pelanggan' => $request->nama_pelanggan,
                'alamat' => $request->alamat,
                'no_telepon' => $request->no_telepon,
                'status' => $request->status,
                'total_harga' => $total_harga
            ]);

            // Hapus pesanan items lama
            $pesanan->pesananItems()->delete();

            // Process each new item and reduce stock (FIFO)
            foreach ($request->items as $item) {
                $produkId = $item['produk_id'];
                $jumlahDibutuhkan = $item['jumlah'];
                
                // Get product price from master
                $produk = \App\Models\Produk::find($produkId);
                $hargaSatuan = $produk->harga_jual;

                // Get stock entries ordered by date (FIFO)
                $stokEntries = StokProduk::where('produk_id', $produkId)
                    ->where('sisa_stok', '>', 0)
                    ->orderBy('tanggal')
                    ->orderBy('id')
                    ->get();

                $sisaDibutuhkan = $jumlahDibutuhkan;

                foreach ($stokEntries as $stokEntry) {
                    if ($sisaDibutuhkan <= 0) break;

                    $stokTersedia = $stokEntry->sisa_stok;

                    if ($stokTersedia >= $sisaDibutuhkan) {
                        // Enough stock in this entry
                        $stokEntry->increment('jumlah_keluar', $sisaDibutuhkan);
                        $stokEntry->decrement('sisa_stok', $sisaDibutuhkan);
                        $sisaDibutuhkan = 0;
                    } else {
                        // Not enough, take all from this entry
                        $stokEntry->increment('jumlah_keluar', $stokTersedia);
                        $stokEntry->decrement('sisa_stok', $stokTersedia);
                        $sisaDibutuhkan -= $stokTersedia;
                    }
                }

                // Buat pesanan item baru
                PesananItem::create([
                    'pesanan_id' => $pesanan->id,
                    'produk_id' => $produkId,
                    'jumlah' => $jumlahDibutuhkan,
                    'harga_satuan' => $hargaSatuan,
                    'subtotal' => $jumlahDibutuhkan * $hargaSatuan
                ]);
            }
        });

        return redirect()->route('backoffice.pesanan.index')->with('success', 'Pesanan berhasil diperbarui dan stok telah disesuaikan.');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        $pesanan = Pesanan::findOrFail($id);

        DB::transaction(function () use ($pesanan) {
            // Return stock from order items
            foreach ($pesanan->pesananItems as $item) {
                $produkId = $item->produk_id;
                $jumlahDikembalikan = $item->jumlah;

                // Get stock entries ordered by date (LIFO for returns)
                $stokEntries = StokProduk::where('produk_id', $produkId)
                    ->where('jumlah_keluar', '>', 0)
                    ->orderBy('tanggal', 'desc')
                    ->orderBy('id', 'desc')
                    ->get();

                $sisaDikembalikan = $jumlahDikembalikan;

                foreach ($stokEntries as $stokEntry) {
                    if ($sisaDikembalikan <= 0) break;

                    $stokDikeluarkan = $stokEntry->jumlah_keluar;

                    if ($stokDikeluarkan >= $sisaDikembalikan) {
                        // Enough to return
                        $stokEntry->decrement('jumlah_keluar', $sisaDikembalikan);
                        $stokEntry->increment('sisa_stok', $sisaDikembalikan);
                        $sisaDikembalikan = 0;
                    } else {
                        // Return all from this entry
                        $stokEntry->decrement('jumlah_keluar', $stokDikeluarkan);
                        $stokEntry->increment('sisa_stok', $stokDikeluarkan);
                        $sisaDikembalikan -= $stokDikeluarkan;
                    }
                }
            }

            // Hapus pesanan items terlebih dahulu
            $pesanan->pesananItems()->delete();

            // Hapus pesanan
            $pesanan->delete();
        });

        return redirect()->route('backoffice.pesanan.index')->with('success', 'Pesanan berhasil dihapus dan stok telah dikembalikan.');
    }

    /**
     * Update status pesanan.
     */
    public function updateStatus(Request $request, string $id)
    {
        try {
            // Eager load pesananItems untuk mengurangi N+1 queries
            $pesanan = Pesanan::with('pesananItems')->findOrFail($id);

            $request->validate([
                'status' => 'required|in:pending,diproses,selesai,dibatalkan'
            ]);

            $oldStatus = $pesanan->status;
            $newStatus = $request->status;

            // Check if status actually changed
            if ($oldStatus === $newStatus) {
                return response()->json([
                    'success' => false,
                    'message' => 'Status pesanan sudah sama. Tidak ada perubahan yang dilakukan.'
                ], 422);
            }

            DB::transaction(function () use ($pesanan, $oldStatus, $newStatus) {
                // Check if stock update is required
                if ($this->requiresStockUpdate($oldStatus, $newStatus)) {
                    $this->updateStockLevels($pesanan, $oldStatus, $newStatus);
                }

                // Update status pesanan
                $pesanan->update(['status' => $newStatus]);
            });

            $statusLabel = [
                'pending' => 'Pending',
                'diproses' => 'Diproses',
                'selesai' => 'Selesai',
                'dibatalkan' => 'Dibatalkan'
            ];

            $message = 'Status pesanan berhasil diubah menjadi ' . $statusLabel[$newStatus];

            // Return JSON response for AJAX requests
            if ($request->ajax() || $request->wantsJson()) {
                return response()->json([
                    'success' => true,
                    'message' => $message,
                    'status' => $newStatus,
                    'status_label' => $statusLabel[$newStatus]
                ]);
            }

            return redirect()->back()->with('success', $message);
            
        } catch (\Exception $e) {
            $errorMessage = 'Terjadi kesalahan: ' . $e->getMessage();
            
            // Return JSON response for AJAX requests
            if ($request->ajax() || $request->wantsJson()) {
                return response()->json([
                    'success' => false,
                    'message' => $errorMessage
                ], 422);
            }
            
            return redirect()->back()->with('error', $errorMessage);
        }
    }

    /**
     * Check if stock update is required for status transition
     */
    private function requiresStockUpdate(string $oldStatus, string $newStatus): bool
    {
        $stockTransitions = [
            'pending' => ['diproses', 'selesai'],
            'diproses' => ['selesai', 'dibatalkan'],
            'selesai' => ['dibatalkan']
        ];

        return isset($stockTransitions[$oldStatus]) && in_array($newStatus, $stockTransitions[$oldStatus]);
    }

    /**
     * Update stock levels based on status transition
     */
    private function updateStockLevels($pesanan, string $oldStatus, string $newStatus): void
    {
        // Collect all product IDs first to optimize queries
        $produkIds = $pesanan->pesananItems->pluck('produk_id')->unique()->toArray();

        if ($newStatus === 'diproses' && $oldStatus === 'pending') {
            // Reduce stock (FIFO)
            $this->reduceStock($produkIds, $pesanan->pesananItems);
        }
        elseif ($newStatus === 'selesai' && $oldStatus === 'pending') {
            // Reduce stock (FIFO)
            $this->reduceStock($produkIds, $pesanan->pesananItems);
        }
        elseif ($newStatus === 'dibatalkan' && $oldStatus === 'diproses') {
            // Return stock (LIFO)
            $this->returnStock($produkIds, $pesanan->pesananItems);
        }
        elseif ($newStatus === 'dibatalkan' && $oldStatus === 'selesai') {
            // Return stock (LIFO)
            $this->returnStock($produkIds, $pesanan->pesananItems);
        }
    }

    /**
     * Reduce stock using FIFO method
     */
    private function reduceStock(array $produkIds, $pesananItems): void
    {
        $allStokEntries = StokProduk::whereIn('produk_id', $produkIds)
            ->where('sisa_stok', '>', 0)
            ->orderBy('produk_id')
            ->orderBy('tanggal')
            ->orderBy('id')
            ->get()
            ->groupBy('produk_id');

        foreach ($pesananItems as $item) {
            $produkId = $item->produk_id;
            $jumlahDibutuhkan = $item->jumlah;
            $stokEntries = $allStokEntries->get($produkId, collect());

            $sisaDibutuhkan = $jumlahDibutuhkan;

            foreach ($stokEntries as $stokEntry) {
                if ($sisaDibutuhkan <= 0) break;

                $stokTersedia = $stokEntry->sisa_stok;

                if ($stokTersedia >= $sisaDibutuhkan) {
                    $stokEntry->increment('jumlah_keluar', $sisaDibutuhkan);
                    $stokEntry->decrement('sisa_stok', $sisaDibutuhkan);
                    $sisaDibutuhkan = 0;
                } else {
                    $stokEntry->increment('jumlah_keluar', $stokTersedia);
                    $stokEntry->decrement('sisa_stok', $stokTersedia);
                    $sisaDibutuhkan -= $stokTersedia;
                }
            }

            if ($sisaDibutuhkan > 0) {
                throw new \Exception("Stok produk ID {$produkId} tidak mencukupi");
            }
        }
    }

    /**
     * Return stock using LIFO method
     */
    private function returnStock(array $produkIds, $pesananItems): void
    {
        $allStokEntries = StokProduk::whereIn('produk_id', $produkIds)
            ->where('jumlah_keluar', '>', 0)
            ->orderBy('produk_id')
            ->orderBy('tanggal', 'desc')
            ->orderBy('id', 'desc')
            ->get()
            ->groupBy('produk_id');

        foreach ($pesananItems as $item) {
            $produkId = $item->produk_id;
            $jumlahDikembalikan = $item->jumlah;
            $stokEntries = $allStokEntries->get($produkId, collect());

            $sisaDikembalikan = $jumlahDikembalikan;

            foreach ($stokEntries as $stokEntry) {
                if ($sisaDikembalikan <= 0) break;

                $stokDikeluarkan = $stokEntry->jumlah_keluar;

                if ($stokDikeluarkan >= $sisaDikembalikan) {
                    $stokEntry->decrement('jumlah_keluar', $sisaDikembalikan);
                    $stokEntry->increment('sisa_stok', $sisaDikembalikan);
                    $sisaDikembalikan = 0;
                } else {
                    $stokEntry->decrement('jumlah_keluar', $stokDikeluarkan);
                    $stokEntry->increment('sisa_stok', $stokDikeluarkan);
                    $sisaDikembalikan -= $stokDikeluarkan;
                }
            }
        }
    }
}
                    
                    // Pre-load all stock entries for all products in one query
                    $allStokEntries = StokProduk::whereIn('produk_id', $produkIds)
                        ->where('jumlah_keluar', '>', 0)
                        ->orderBy('produk_id')
                        ->orderBy('tanggal', 'desc')
                        ->orderBy('id', 'desc')
                        ->get()
                        ->groupBy('produk_id');

                    foreach ($pesanan->pesananItems as $item) {
                        $produkId = $item->produk_id;
                        $jumlahDikembalikan = $item->jumlah;

                        // Get pre-loaded stock entries for this product
                        $stokEntries = $allStokEntries->get($produkId, collect());

                        $sisaDikembalikan = $jumlahDikembalikan;

                        foreach ($stokEntries as $stokEntry) {
                            if ($sisaDikembalikan <= 0) break;

                            $stokDikeluarkan = $stokEntry->jumlah_keluar;

                            if ($stokDikeluarkan >= $sisaDikembalikan) {
                                // Enough to return
                                $stokEntry->decrement('jumlah_keluar', $sisaDikembalikan);
                                $stokEntry->increment('sisa_stok', $sisaDikembalikan);
                                $sisaDikembalikan = 0;
                            } else {
                                // Return all from this entry
                                $stokEntry->decrement('jumlah_keluar', $stokDikeluarkan);
                                $stokEntry->increment('sisa_stok', $stokDikeluarkan);
                                $sisaDikembalikan -= $stokDikeluarkan;
                            }
                        }
    }
}
                        ->orderBy('produk_id')
                        ->orderBy('tanggal', 'desc')
                        ->orderBy('id', 'desc')
                        ->get()
                        ->groupBy('produk_id');

                    foreach ($pesanan->pesananItems as $item) {
                        $produkId = $item->produk_id;
                        $jumlahDikembalikan = $item->jumlah;

                        // Get pre-loaded stock entries for this product
                        $stokEntries = $allStokEntries->get($produkId, collect());

                        $sisaDikembalikan = $jumlahDikembalikan;

                        foreach ($stokEntries as $stokEntry) {
                            if ($sisaDikembalikan <= 0) break;

                        $sisaDikembalikan = $jumlahDikembalikan;

                        foreach ($stokEntries as $stokEntry) {
                            if ($sisaDikembalikan <= 0) break;

                            $stokDikeluarkan = $stokEntry->jumlah_keluar;

                            if ($stokDikeluarkan >= $sisaDikembalikan) {
                                // Enough to return
                                $stokEntry->decrement('jumlah_keluar', $sisaDikembalikan);
                                $stokEntry->increment('sisa_stok', $sisaDikembalikan);
                                $sisaDikembalikan = 0;
                            } else {
                                // Return all from this entry
                                $stokEntry->decrement('jumlah_keluar', $stokDikeluarkan);
                                $stokEntry->increment('sisa_stok', $stokDikeluarkan);
                                $sisaDikembalikan -= $stokDikeluarkan;
                            }
                        }
                    }
                }

                // Update status pesanan
                $pesanan->update(['status' => $newStatus]);
            });

            $statusLabel = [
                'pending' => 'Pending',
                'diproses' => 'Diproses',
                'selesai' => 'Selesai',
                'dibatalkan' => 'Dibatalkan'
            ];

            $message = 'Status pesanan berhasil diubah menjadi ' . $statusLabel[$newStatus];

            // Return JSON response for AJAX requests
            if ($request->ajax() || $request->wantsJson()) {
                return response()->json([
                    'success' => true,
                    'message' => $message,
                    'status' => $newStatus,
                    'status_label' => $statusLabel[$newStatus]
                ]);
            }

            return redirect()->back()->with('success', $message);
            
        } catch (\Exception $e) {
            $errorMessage = 'Terjadi kesalahan: ' . $e->getMessage();
            
            // Return JSON response for AJAX requests
            if ($request->ajax() || $request->wantsJson()) {
                return response()->json([
                    'success' => false,
                    'message' => $errorMessage
                ], 422);
            }
            
            return redirect()->back()->with('error', $errorMessage);
        }
    }

    /**
     * Check if stock update is required for status transition
     */
    private function requiresStockUpdate(string $oldStatus, string $newStatus): bool
    {
        $stockTransitions = [
            'pending' => ['diproses', 'selesai'],
            'diproses' => ['selesai', 'dibatalkan'],
            'selesai' => ['dibatalkan']
        ];

        return isset($stockTransitions[$oldStatus]) && in_array($newStatus, $stockTransitions[$oldStatus]);
    }
}
